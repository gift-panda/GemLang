import gem.RuntimeError;

class Math{
    var PI = 3.1415926535893;
    var E = 2.7182818284590;

    static sqrt(num){
        if(num < 0){
            throw RuntimeError("sqrt(x): invalid input " + num + " , must be non-negative");
        }
        var result = Math.pow(num, 0.5);
        return result;
    }

    static ln(num){
        if(num <= 0){
            throw RuntimeError("ln(x): invalid input " + num + " , x must be greater than zero");
        }

        var k = 0;

        while(num > 2){
            num = num / Math.E;
            k = k + 1;
        }
        while(num < 0.5){
            num = num * Math.E;
            k = k - 1;
        }

        var x = (num - 1)/(num + 1);
        var x2 = x*x;
        var term = x;
        var sum = 0;

        for(var n = 1; n <= 20; n = n + 2){
            sum = sum + term/n;
            term = term * x2;
        }

        return 2*sum + k;

    }

    static exp(num){
        var sum = 1;
        var term = 1;
        for(var i = 1; i < 100; i = i + 1){
            term = term * num / i;
            sum = sum + term;
        }
        return sum;
    }

    static pow(a, b){
        var sign = 1;
        if(a <= 0){
            a = -a;
            if(b % 2 != 0)
                sign = -1;
        }
        return Math.round(Math.exp(b * Math.ln(a)), 9) * sign;
    }

    static round(value, decimals){
        if(value < 0) return value;
        var factor = 1;
        for(var i = 1; i <= decimals; i=i+1){
            factor = factor * 10;
        }
        return Math.round(value * factor)/factor;
    }

    static round(x){
        if (x >= 0) {
            var k = 0;
            if(x % 1 >= 0.5)
                k = 1;
            else
                k = 0;
            return x - (x % 1) + k;
        } else {
            var k = 0;
            if(x % 1 >= 0.5)
                k = 1;
            else
                k = 0;
            return x - (x % 1) - k;
        }
    }

    static abs(x){
        if(x >= 0) return x;
        else return -x;
    }

    static floor(x){
        if(x >= 0) return x - (x % 1);
        if(x % 1 == 0) return x;
        return x - (x % 1) - 1;
    }

    static ceil(x){
        if(x % 1 == 0) return x;
        return x - (x % 1) + 1;
    }

    static max(a, b){
        if(a > b) return a;
        else return b;
    }

    static min(a, b){
        return a + b - Math.max(a, b);
    }

    static sign(x){
        if(x > 0) return 1;
        if(x < 0) return -1;
        return 0;
    }

    static clamp(x, min, max){
        if(x < min) return min;
        if(x > max) return max;
        return x;
    }

    static mod(a, b){
        var r = a % b;
        if(r < 0) return r + b;
        else return r;
    }

    static toRadians(deg){
        return deg * Math.PI / 180;
    }

    static toDegrees(rad){
        return rad * 180 / Math.PI;
    }

    static sin(x){
        var term = x;
        var sum = 0;
        var sign = 1;
        for(var i = 1; i <= 19; i = i + 2){
            sum = sum + sign * term;
            term = term * x * x / ((i + 1) * (i + 2));
            sign = -sign;
        }
        return sum;
    }

    static cos(x){
        var term = 1;
        var sum = 0;
        var sign = 1;
        for(var i = 0; i <= 18; i = i + 2){
            sum = sum + sign * term;
            term = term * x * x / ((i + 1) * (i + 2));
            sign = -sign;
        }
        return sum;
    }

    static tan(x){
        if(x % (Math.PI / 2) == 0 and (x / (Math.PI / 2)) % 2 == 1){
            return x/0;
        }

        var x2 = x * x;
        var term = x;
        var sum = x;

        // Precomputed coefficients for tan(x) Taylor series (only odd powers)
        var coeffs = [1, 1/3, 2/15, 17/315, 62/2835, 1382/155925];

        for(var i = 1; i < coeffs.length; i = i + 1){
            term = term * x2;
            sum = sum + coeffs[i] * term;
        }

        return sum;
    }

    static asin(x){
        if(x < -1 or x > 1){
            throw RuntimeError("asin(x): input out of domain [-1, 1]");
        }

        var term = x;
        var sum = x;
        var x2 = x * x;
        var num = 1;
        var denom = 2;

        for(var i = 1; i < 10; i = i + 1){
            term = term * x2;
            num = num * (2 * i - 1);
            denom = denom * (2 * i);
            sum = sum + (num / (denom * (2 * i + 1))) * term;
        }

        return sum;
    }

    static acos(x){
        if(x < -1 or x > 1){
                throw RuntimeError("acos(x): input out of domain [-1, 1]");
        }
        return Math.PI / 2 - Math.asin(x);
    }

    static atan(x){
        var abs = Math.abs(x);

        if(abs > 1){
            var result = Math.PI / 2 - Math.atan(1 / abs);
            if(x >= 0) return result;
            else return -result;
        }

        var term = x;
        var sum = x;
        var x2 = x * x;
        var sign = -1;

        for(var i = 3; i <= 19; i = i + 2){
            term = term * x2;
            sum = sum + sign * term / i;
            sign = -sign;
        }

        return sum;
    }

}